// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Grpc = require("./Grpc.bs.js");
var Mock = require("./Mock.bs.js");
var Util = require("./Util.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Kafka_raw = require("bs-kafka/src/Kafka_raw.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var KafkaNode = require("kafka-node");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var GenericProducer = require("./GenericProducer.bs.js");

var blankWidgetTopic = "blank-widget";

var cutWidgetTopic = "cut-widget";

var zookeeperAddress = Util.getEnvExn("ZOOKEEPER");

var clientIdentifier = "WidgetCutterService.re";

var client = new KafkaNode.Client(zookeeperAddress, clientIdentifier);

function onError(param) {
  console.log("error=", param);
  return /* () */0;
}

function onOffsetOutOfRange(e) {
  return Pervasives.failwith("offsetOutOfRange=" + String(e));
}

function make(producer) {
  var onMessage = function (receipt) {
    var buffer = Kafka_raw.Consumer[/* bufferValue */2](receipt);
    var blankWidget = Curry._1(Grpc.Assemblyline[/* BlankWidget */2][/* decode */6], buffer);
    console.log("rx:", Util.blankWidgetToString(blankWidget));
    var widgetCondition = Belt_Option.getExn(Curry._1(Grpc.Assemblyline[/* BlankWidget */2][/* condition */1], blankWidget));
    console.log("cutting widget...");
    return Mock.cutWidget((function (widgetCondition, numTeeth) {
                  var cutWidget = Curry._3(Grpc.Assemblyline[/* CutWidget */3][/* make */2], /* Some */[widgetCondition], /* Some */[numTeeth], /* () */0);
                  console.log("widget cut!");
                  console.log("tx:", Util.cutWidgetToString(cutWidget));
                  GenericProducer.send(cutWidgetTopic, producer, Curry._1(Grpc.Assemblyline[/* CutWidget */3][/* encode */5], cutWidget));
                  return /* () */0;
                }), widgetCondition);
  };
  var consumer = new KafkaNode.Consumer(client, /* array */[{
          topic: blankWidgetTopic
        }], {
        encoding: "buffer"
      });
  consumer.on("error", onError);
  consumer.on("offsetOutOfRange", onOffsetOutOfRange);
  consumer.on("message", onMessage);
  return consumer;
}

var Consumer = /* module */[
  /* onError */onError,
  /* onOffsetOutOfRange */onOffsetOutOfRange,
  /* make */make
];

var producer = GenericProducer.make(client, (function (producer) {
        make(producer);
        return /* () */0;
      }));

var K = 0;

var BlankWidget = 0;

var CutWidget = 0;

exports.K = K;
exports.BlankWidget = BlankWidget;
exports.CutWidget = CutWidget;
exports.blankWidgetTopic = blankWidgetTopic;
exports.cutWidgetTopic = cutWidgetTopic;
exports.zookeeperAddress = zookeeperAddress;
exports.clientIdentifier = clientIdentifier;
exports.client = client;
exports.Consumer = Consumer;
exports.producer = producer;
/* zookeeperAddress Not a pure module */
