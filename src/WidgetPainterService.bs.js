// Generated by BUCKLESCRIPT VERSION 4.0.1, PLEASE EDIT WITH CARE
'use strict';

var Grpc = require("./Grpc.bs.js");
var Mock = require("./Mock.bs.js");
var Util = require("./Util.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Kafka_raw = require("bs-kafka/src/Kafka_raw.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var KafkaNode = require("kafka-node");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var GenericProducer = require("./GenericProducer.bs.js");

var cutWidgetTopic = "cut-widget";

var paintedWidgetTopic = "painted-widget";

var zookeeperAddress = Util.getEnvExn("ZOOKEEPER");

var clientIdentifier = "WidgetPainterService.re";

var client = new KafkaNode.Client(zookeeperAddress, clientIdentifier);

function onError(param) {
  console.log("error=", param);
  return /* () */0;
}

function onOffsetOutOfRange(e) {
  return Pervasives.failwith("offsetOutOfRange=" + String(e));
}

function make(producer) {
  var onMessage = function (receipt) {
    var buffer = Kafka_raw.Consumer[/* bufferValue */2](receipt);
    var cutWidget = Curry._1(Grpc.Assemblyline[/* CutWidget */3][/* decode */6], buffer);
    console.log("rx:", Util.cutWidgetToString(cutWidget));
    var condition = Belt_Option.getExn(Curry._1(Grpc.Assemblyline[/* CutWidget */3][/* conditionGet */1], cutWidget));
    var numTeeth = Belt_Option.getExn(Js_primitive.undefined_to_opt(cutWidget.numTeeth));
    console.log("painting widget...");
    return Mock.paintWidget((function (condition, paintJob) {
                  var paintedWidget = Curry._4(Grpc.Assemblyline[/* PaintedWidget */5][/* make */3], condition, numTeeth, paintJob, /* () */0);
                  console.log("widget painted!");
                  console.log("tx:", Util.paintedWidgetToString(paintedWidget));
                  GenericProducer.send(paintedWidgetTopic, producer, Curry._1(Grpc.Assemblyline[/* PaintedWidget */5][/* encode */6], paintedWidget));
                  return /* () */0;
                }), condition);
  };
  var consumer = new KafkaNode.Consumer(client, /* array */[{
          topic: cutWidgetTopic
        }], {
        encoding: "buffer"
      });
  consumer.on("error", onError);
  consumer.on("offsetOutOfRange", onOffsetOutOfRange);
  consumer.on("message", onMessage);
  return consumer;
}

var Consumer = /* module */[
  /* onError */onError,
  /* onOffsetOutOfRange */onOffsetOutOfRange,
  /* make */make
];

var producer = GenericProducer.make(client, (function (producer) {
        make(producer);
        return /* () */0;
      }));

var K = 0;

var CutWidget = 0;

var PaintedWidget = 0;

exports.K = K;
exports.CutWidget = CutWidget;
exports.PaintedWidget = PaintedWidget;
exports.cutWidgetTopic = cutWidgetTopic;
exports.paintedWidgetTopic = paintedWidgetTopic;
exports.zookeeperAddress = zookeeperAddress;
exports.clientIdentifier = clientIdentifier;
exports.client = client;
exports.Consumer = Consumer;
exports.producer = producer;
/* zookeeperAddress Not a pure module */
